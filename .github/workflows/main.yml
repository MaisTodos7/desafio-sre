name: Pipeline CI 

# Conditional that identifies the origin of the commit and triggers the job according to the branch
on:
  push:
    branches: [main]

# Global Environments
env:
  ECR_REGISTRY: 073351666420.dkr.ecr.us-east-1.amazonaws.com
  ECR_REPOSITORY: metabase
  IMAGE_TAG: build${GITHUB_RUN_NUMBER}-${GITHUB_SHA::7}

jobs:
  build:
    runs-on: ubuntu-latest

    # AWS Authentication
    steps:
      - uses: actions/checkout@v2
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      # Login on Registry
      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      # Start the Magik. Image Build
      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: 073351666420.dkr.ecr.us-east-1.amazonaws.com
          ECR_REPOSITORY: metabase
        run: |
          CI_COMMIT_SHORT_SHA=${GITHUB_SHA}
          IMAGE_TAG=build${GITHUB_RUN_NUMBER}-${GITHUB_SHA::7}
          git clone https://github.com/metabase/metabase.git
          cd metabase
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "Update Image version to ArgoCD"
          cd argocd/app/metabase
          git checkout main
          USER=$(git log -1 --format="%an")
          MAIL=$(git log -1 --format="%ae")
          git config user.name --global "$USER"
          git config user.email --global "$MAIL"
          git config pull.rebase false --global
          git fetch --all
          #git merge -X theirs origin/master
          #grep "image:" metabase/*.yaml | awk '{ print $2 }' | sed -i -e 's/build[0-9]*\-.*/'$IMAGE_TAG'/' metabase/*.yaml    
          #git add .
          #git commit -m "Update image tag. CI JOB ID='$IMAGE_TAG'" 
          #git push --set-upstream origin master
      - name: Log out of Amazon ECR
        if: always()
        run: docker logout ${{ steps.login-ecr.outputs.registry }}
